const { Sequelize } = require('sequelize');

// Script para executar migra√ß√µes de feedback voting em produ√ß√£o
async function migrateFeedbackVotingProduction() {
  // Usar DATABASE_URL diretamente (ambiente de produ√ß√£o)
  const databaseUrl = process.env.DATABASE_URL;

  if (!databaseUrl) {
    console.error('‚ùå DATABASE_URL n√£o configurada. Execute com:');
    console.error('DATABASE_URL="sua-url-do-neon" node scripts/migrate-feedback-voting-production.js');
    process.exit(1);
  }

  console.log('üîó Conectando ao banco de produ√ß√£o...');
  console.log('üìç URL:', databaseUrl.replace(/\/\/.*@/, '//***:***@')); // Oculta credenciais

  const sequelize = new Sequelize(databaseUrl, {
    dialect: 'postgres',
    dialectOptions: {
      ssl: {
        require: true,
        rejectUnauthorized: false
      }
    },
    logging: false // Desabilitar logs SQL para limpar output
  });

  try {
    // Testar conex√£o
    await sequelize.authenticate();
    console.log('‚úÖ Conectado ao banco de produ√ß√£o');

    console.log('üîç Verificando estrutura atual da tabela feedbacks...');

    // Verificar se a coluna votes j√° existe
    const [votesColumn] = await sequelize.query(`
      SELECT column_name
      FROM information_schema.columns
      WHERE table_name = 'feedbacks' AND column_name = 'votes'
    `, { type: Sequelize.QueryTypes.SELECT });

    if (!votesColumn) {
      console.log('üìù Adicionando coluna "votes" √† tabela feedbacks...');
      await sequelize.query(`
        ALTER TABLE feedbacks ADD COLUMN votes INTEGER NOT NULL DEFAULT 0;
      `);
      console.log('‚úÖ Coluna "votes" adicionada com sucesso');
    } else {
      console.log('‚ÑπÔ∏è  Coluna "votes" j√° existe na tabela feedbacks');
    }

    // Verificar se a tabela feedback_votes existe
    const [feedbackVotesTable] = await sequelize.query(`
      SELECT table_name
      FROM information_schema.tables
      WHERE table_schema = 'public' AND table_name = 'feedback_votes'
    `, { type: Sequelize.QueryTypes.SELECT });

    if (!feedbackVotesTable) {
      console.log('üìù Criando tabela "feedback_votes"...');

      await sequelize.query(`
        CREATE TABLE feedback_votes (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          feedback_id UUID NOT NULL REFERENCES feedbacks(id) ON DELETE CASCADE,
          user_id UUID REFERENCES users(id) ON DELETE CASCADE,
          ip_address VARCHAR(255),
          user_agent TEXT,
          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
      `);
      console.log('‚úÖ Tabela "feedback_votes" criada com sucesso');

      console.log('üìù Criando √≠ndices √∫nicos para controle de vota√ß√£o...');

      // √çndice √∫nico para votos de usu√°rios autenticados
      await sequelize.query(`
        CREATE UNIQUE INDEX unique_feedback_user_vote
        ON feedback_votes (feedback_id, user_id)
        WHERE user_id IS NOT NULL;
      `);

      // √çndice √∫nico para votos por IP (usu√°rios an√¥nimos)
      await sequelize.query(`
        CREATE UNIQUE INDEX unique_feedback_ip_vote
        ON feedback_votes (feedback_id, ip_address)
        WHERE user_id IS NULL AND ip_address IS NOT NULL;
      `);

      console.log('‚úÖ √çndices √∫nicos criados com sucesso');
    } else {
      console.log('‚ÑπÔ∏è  Tabela "feedback_votes" j√° existe');
    }

    // Verificar se h√° feedbacks existentes e atualizar contador de votos se necess√°rio
    console.log('üîç Verificando feedbacks existentes...');

    const [feedbackCount] = await sequelize.query(`
      SELECT COUNT(*) as count FROM feedbacks
    `, { type: Sequelize.QueryTypes.SELECT });

    console.log(`üìä Encontrados ${feedbackCount.count} feedbacks existentes`);

    if (feedbackCount.count > 0) {
      console.log('üîÑ Sincronizando contadores de votos...');

      await sequelize.query(`
        UPDATE feedbacks
        SET votes = (
          SELECT COUNT(*)
          FROM feedback_votes
          WHERE feedback_votes.feedback_id = feedbacks.id
        )
      `);

      console.log('‚úÖ Contadores de votos sincronizados');
    }

    console.log('\nüéâ Migra√ß√£o do sistema de vota√ß√£o conclu√≠da com sucesso!');
    console.log('\nüìã Resumo das altera√ß√µes:');
    console.log('   ‚úÖ Coluna "votes" na tabela feedbacks');
    console.log('   ‚úÖ Tabela "feedback_votes" para controle de votos');
    console.log('   ‚úÖ √çndices √∫nicos para preven√ß√£o de votos m√∫ltiplos');
    console.log('   ‚úÖ Contadores de votos sincronizados');

    console.log('\nüöÄ Sistema de vota√ß√£o de feedback est√° pronto para uso em produ√ß√£o!');

  } catch (error) {
    console.error('‚ùå Erro durante a migra√ß√£o:', error);
    throw error;
  } finally {
    await sequelize.close();
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  migrateFeedbackVotingProduction()
    .then(() => {
      console.log('\nüéâ Script de migra√ß√£o conclu√≠do com sucesso!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå Falha na execu√ß√£o da migra√ß√£o:', error.message);
      process.exit(1);
    });
}

module.exports = { migrateFeedbackVotingProduction };