require('dotenv').config();
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const morgan = require('morgan');
const compression = require('compression');
const { sequelize } = require('./database/connection');
const routes = require('./routes');
const { errorHandler, notFoundHandler } = require('./middleware/errorHandler');
// Temporariamente comentado para debug
// const {
//   readApiLimiter,
//   writeApiLimiter,
//   dashboardLimiter,
//   authLimiter,
//   settingsLimiter,
//   globalLimiter
// } = require('./middleware/scalableRateLimit');
// const { monitor, rateLimitMonitor } = require('./middleware/requestMonitoring');
const CronJobService = require('./services/CronJobService');
const AutomationService = require('./services/AutomationService');

const app = express();
const PORT = process.env.PORT || 3000;

// ✨ Sistema de Rate Limiting Escalável para Centenas de Usuários Simultâneos
// Baseado em usuário autenticado, não por IP
// Suporta 500+ usuários com milhares de requisições por minuto

// Middleware
app.use(helmet()); // Security headers
app.use(compression()); // Compress responses
app.use(cors({
  origin: process.env.NODE_ENV === 'production' 
    ? ['https://yourdomain.com'] // Configure your frontend domain
    : true,
  credentials: true
}));
app.use(morgan(process.env.NODE_ENV === 'production' ? 'combined' : 'dev'));
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// 📊 Sistema de Monitoramento (desabilitado temporariamente)
// app.use(monitor()); // Monitoramento geral de requisições
// app.use(rateLimitMonitor()); // Monitoramento específico de rate limiting
// ✅ Rate Limiting (temporariamente desabilitado para debug)
// TODO: Re-habilitar após resolver problemas
// app.use(globalLimiter);

// Health check
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    version: process.env.npm_package_version || '1.0.0'
  });
});

// API Routes
app.use('/api', routes);

// Error handling
app.use(notFoundHandler);
app.use(errorHandler);

// Start server
async function startServer() {
  try {
    // Test database connection
    await sequelize.authenticate();
    console.log('✅ Conexão com banco de dados estabelecida');

    // Database models already synced - skip sync in production
    console.log('✅ Usando modelos já sincronizados no PostgreSQL');

    // Inicializar serviços de automação
    await CronJobService.initialize();
    
    // Processar automações agendadas a cada minuto
    setInterval(async () => {
      await AutomationService.processScheduledAutomations();
    }, 60000); // 1 minuto

    app.listen(PORT, '0.0.0.0', () => {
      console.log(`🚀 Servidor rodando na porta ${PORT}`);
      console.log(`📊 Local: http://localhost:${PORT}/health`);
      console.log(`📊 WSL: http://172.23.223.142:${PORT}/health`);
      console.log(`🔌 API: http://localhost:${PORT}/api`);
      console.log(`⚡ Automações: Ativas`);
    });
  } catch (error) {
    console.error('❌ Erro ao iniciar servidor:', error);
    process.exit(1);
  }
}

// Graceful shutdown
process.on('SIGTERM', async () => {
  console.log('🔄 Encerrando servidor...');
  CronJobService.stopAllJobs();
  await sequelize.close();
  process.exit(0);
});

process.on('SIGINT', async () => {
  console.log('🔄 Encerrando servidor...');
  CronJobService.stopAllJobs();
  await sequelize.close();
  process.exit(0);
});

startServer();
