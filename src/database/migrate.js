require('dotenv').config();
const { sequelize } = require('./connection');
require('../models'); // Importar modelos para sincronizar

async function migrate() {
  try {
    console.log('ÔøΩ Iniciando migra√ß√£o do banco de dados...');
    
    // Testar conex√£o
    console.log('üì° Testando conex√£o com PostgreSQL...');
    await sequelize.authenticate();
    console.log('‚úÖ Conex√£o estabelecida com sucesso!');
    
    // Sincronizar modelos
    console.log('üîß Sincronizando modelos...');
    await sequelize.sync({ force: false, alter: true });
    console.log('‚úÖ Modelos sincronizados com sucesso!');
    
    // Mostrar informa√ß√µes do banco
    try {
      const [results] = await sequelize.query(`
        SELECT 
          current_database() as database_name,
          current_user as current_user,
          version() as postgresql_version
      `);
      
      console.log('üìä Informa√ß√µes do banco:');
      console.log(`   Banco: ${results[0].database_name}`);
      console.log(`   Usu√°rio: ${results[0].current_user}`);
      console.log(`   Vers√£o: ${results[0].postgresql_version.split(' ')[0]}`);
    } catch (infoError) {
      console.log('‚ÑπÔ∏è N√£o foi poss√≠vel obter informa√ß√µes detalhadas do banco');
    }
    
    console.log('üéâ Migra√ß√£o conclu√≠da!');
  } catch (error) {
    console.error('‚ùå Erro na migra√ß√£o:', error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.error('üí° Dica: Certifique-se de que o PostgreSQL est√° rodando:');
      console.error('   - Docker: docker-compose up -d postgres');
      console.error('   - Local: verifique se o servi√ßo PostgreSQL est√° ativo');
    }
    
    process.exit(1);
  } finally {
    await sequelize.close();
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  migrate();
}

module.exports = migrate;
